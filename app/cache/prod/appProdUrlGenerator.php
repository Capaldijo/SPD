<?php

use Symfony\Component\Routing\RequestContext;
use Symfony\Component\Routing\Exception\RouteNotFoundException;
use Psr\Log\LoggerInterface;

/**
 * appProdUrlGenerator
 *
 * This class has been auto-generated
 * by the Symfony Routing Component.
 */
class appProdUrlGenerator extends Symfony\Component\Routing\Generator\UrlGenerator
{
    private static $declaredRoutes = array(
        'descartes_recupbd_homepage' => array (  0 =>   array (    0 => 'name',  ),  1 =>   array (    '_controller' => 'Descartes\\RecupbdBundle\\Controller\\DefaultController::indexAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'name',    ),    1 =>     array (      0 => 'text',      1 => '/hello',    ),  ),  4 =>   array (  ),),
        'descartes_recherche_homepage' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Descartes\\RechercheBundle\\Controller\\RechercheController::indexAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/search',    ),  ),  4 =>   array (  ),),
        'descartes_recherche_resultSearch' => array (  0 =>   array (    0 => 'search',  ),  1 =>   array (    '_controller' => 'Descartes\\RechercheBundle\\Controller\\RechercheController::searchAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'search',    ),    1 =>     array (      0 => 'text',      1 => '/resultSearch',    ),  ),  4 =>   array (  ),),
        'descartes_evenement_homepage' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Descartes\\EvenementBundle\\Controller\\EvenementController::indexAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/evenement',    ),  ),  4 =>   array (  ),),
        'descartes_evenement_creerevenement' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Descartes\\EvenementBundle\\Controller\\EvenementController::creerevenementAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/creerevenement',    ),  ),  4 =>   array (  ),),
        'descartes_evenement_voir' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'Descartes\\EvenementBundle\\Controller\\EvenementController::voirevenementAction',  ),  2 =>   array (    'id' => '\\d+',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '\\d+',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/evenement',    ),  ),  4 =>   array (  ),),
        'descartes_evenement_setting' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'Descartes\\EvenementBundle\\Controller\\EvenementController::settingAction',  ),  2 =>   array (    'id' => '\\d+',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '\\d+',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/evenement/setting',    ),  ),  4 =>   array (  ),),
        'descartes_evenement_calendrier' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Descartes\\EvenementBundle\\Controller\\EvenementController::calendrierAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/calendrier',    ),  ),  4 =>   array (  ),),
        'descartes_evenement_filtreEvent' => array (  0 =>   array (    0 => 'filtre',  ),  1 =>   array (    '_controller' => 'Descartes\\EvenementBundle\\Controller\\EvenementController::filtrerparAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'filtre',    ),    1 =>     array (      0 => 'text',      1 => '/evenement/filtrerpar',    ),  ),  4 =>   array (  ),),
        'descartes_evenement_myEvents' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Descartes\\EvenementBundle\\Controller\\EvenementController::myEventsAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/evenement/myEvents/',    ),  ),  4 =>   array (  ),),
        'descartes_evenement_comment' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'Descartes\\EvenementBundle\\Controller\\EvenementController::postCommentAction',  ),  2 =>   array (    'id' => '\\d+',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '\\d+',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/evenement/comment',    ),  ),  4 =>   array (  ),),
        'descartes_evenement_participe' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'Descartes\\EvenementBundle\\Controller\\EvenementController::participeAction',  ),  2 =>   array (    'id' => '\\d+',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '\\d+',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/evenement/participe',    ),  ),  4 =>   array (  ),),
        'descartes_evenement_participant' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'Descartes\\EvenementBundle\\Controller\\EvenementController::listeParticipantAction',  ),  2 =>   array (    'id' => '\\d+',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '\\d+',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/evenement/participant',    ),  ),  4 =>   array (  ),),
        'descartes_evenement_cancelPart' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'Descartes\\EvenementBundle\\Controller\\EvenementController::cancelPartAction',  ),  2 =>   array (    'id' => '\\d+',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '\\d+',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/evenement/cancelparticipation',    ),  ),  4 =>   array (  ),),
        'descartes_evenement_addNote' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'Descartes\\EvenementBundle\\Controller\\EvenementController::addNoteAction',  ),  2 =>   array (    'id' => '\\d+',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '\\d+',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/evenement/addNote',    ),  ),  4 =>   array (  ),),
        'descartes_utilisateur_homepage' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Descartes\\UtilisateurBundle\\Controller\\UtilisateurController::indexAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/utilisateur',    ),  ),  4 =>   array (  ),),
        'descartes_utilisateur_inscription' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Descartes\\UtilisateurBundle\\Controller\\UtilisateurController::inscriptionAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/utilisateur/inscription',    ),  ),  4 =>   array (  ),),
        'descartes_utilisateur_profil' => array (  0 =>   array (    0 => 'login',  ),  1 =>   array (    '_controller' => 'Descartes\\UtilisateurBundle\\Controller\\UtilisateurController::profilAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'login',    ),    1 =>     array (      0 => 'text',      1 => '/utilisateur/profil',    ),  ),  4 =>   array (  ),),
        'descartes_utilisateur_setting' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Descartes\\UtilisateurBundle\\Controller\\UtilisateurController::settingAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/utilisateur/setting',    ),  ),  4 =>   array (  ),),
        'descartes_utilisateur_friends' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Descartes\\UtilisateurBundle\\Controller\\UtilisateurController::friendsAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/utilisateur/friends',    ),  ),  4 =>   array (  ),),
        'descartes_utilisateur_sendMessage' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Descartes\\UtilisateurBundle\\Controller\\UtilisateurController::sendMessageAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/utilisateur/sdMessage',    ),  ),  4 =>   array (  ),),
        'descartes_utilisateur_sendMessageTo' => array (  0 =>   array (    0 => 'login',  ),  1 =>   array (    '_controller' => 'Descartes\\UtilisateurBundle\\Controller\\UtilisateurController::sendMessageToAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'login',    ),    1 =>     array (      0 => 'text',      1 => '/utilisateur/sdMessage',    ),  ),  4 =>   array (  ),),
        'descartes_utilisateur_readMessage' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Descartes\\UtilisateurBundle\\Controller\\UtilisateurController::readMessageAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/utilisateur/rdMessage',    ),  ),  4 =>   array (  ),),
        'descartes_utilisateur_delMessage' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'Descartes\\UtilisateurBundle\\Controller\\UtilisateurController::delMessageAction',  ),  2 =>   array (    'id' => '\\d+',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '\\d+',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/utilisateur/delMessage',    ),  ),  4 =>   array (  ),),
        'login' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Descartes\\UtilisateurBundle\\Controller\\UtilisateurController::loginAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/login',    ),  ),  4 =>   array (  ),),
        'login_check' => array (  0 =>   array (  ),  1 =>   array (  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/login_check',    ),  ),  4 =>   array (  ),),
        '_security_login' => array (  0 =>   array (  ),  1 =>   array (  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/loginfb',    ),  ),  4 =>   array (  ),),
        '_security_check' => array (  0 =>   array (  ),  1 =>   array (  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/loginfb_check',    ),  ),  4 =>   array (  ),),
        'fos_facebook_channel' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'FOS\\FacebookBundle\\Controller\\FacebookController::channelAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/channel.html',    ),  ),  4 =>   array (  ),),
        'fos_user_security_login' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'FOS\\UserBundle\\Controller\\SecurityController::loginAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/login',    ),  ),  4 =>   array (  ),),
        'fos_user_security_check' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'FOS\\UserBundle\\Controller\\SecurityController::checkAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/login_check',    ),  ),  4 =>   array (  ),),
        'fos_user_security_logout' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'FOS\\UserBundle\\Controller\\SecurityController::logoutAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/logout',    ),  ),  4 =>   array (  ),),
        'fos_user_profile_show' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'FOS\\UserBundle\\Controller\\ProfileController::showAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/utilisateur/profile/',    ),  ),  4 =>   array (  ),),
        'fos_user_profile_edit' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'FOS\\UserBundle\\Controller\\ProfileController::editAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/utilisateur/profile/edit',    ),  ),  4 =>   array (  ),),
        'fos_user_registration_register' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'FOS\\UserBundle\\Controller\\RegistrationController::registerAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/register/',    ),  ),  4 =>   array (  ),),
        'fos_user_registration_check_email' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'FOS\\UserBundle\\Controller\\RegistrationController::checkEmailAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/register/check-email',    ),  ),  4 =>   array (  ),),
        'fos_user_registration_confirm' => array (  0 =>   array (    0 => 'token',  ),  1 =>   array (    '_controller' => 'FOS\\UserBundle\\Controller\\RegistrationController::confirmAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'token',    ),    1 =>     array (      0 => 'text',      1 => '/register/confirm',    ),  ),  4 =>   array (  ),),
        'fos_user_registration_confirmed' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'FOS\\UserBundle\\Controller\\RegistrationController::confirmedAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/register/confirmed',    ),  ),  4 =>   array (  ),),
        'fos_user_resetting_request' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'FOS\\UserBundle\\Controller\\ResettingController::requestAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/resetting/request',    ),  ),  4 =>   array (  ),),
        'fos_user_resetting_send_email' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'FOS\\UserBundle\\Controller\\ResettingController::sendEmailAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/resetting/send-email',    ),  ),  4 =>   array (  ),),
        'fos_user_resetting_check_email' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'FOS\\UserBundle\\Controller\\ResettingController::checkEmailAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/resetting/check-email',    ),  ),  4 =>   array (  ),),
        'fos_user_resetting_reset' => array (  0 =>   array (    0 => 'token',  ),  1 =>   array (    '_controller' => 'FOS\\UserBundle\\Controller\\ResettingController::resetAction',  ),  2 =>   array (    '_method' => 'GET|POST',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'token',    ),    1 =>     array (      0 => 'text',      1 => '/resetting/reset',    ),  ),  4 =>   array (  ),),
        'fos_user_change_password' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'FOS\\UserBundle\\Controller\\ChangePasswordController::changePasswordAction',  ),  2 =>   array (    '_method' => 'GET|POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/utilisateur/profile/change-password',    ),  ),  4 =>   array (  ),),
    );

    /**
     * Constructor.
     */
    public function __construct(RequestContext $context, LoggerInterface $logger = null)
    {
        $this->context = $context;
        $this->logger = $logger;
    }

    public function generate($name, $parameters = array(), $referenceType = self::ABSOLUTE_PATH)
    {
        if (!isset(self::$declaredRoutes[$name])) {
            throw new RouteNotFoundException(sprintf('Unable to generate a URL for the named route "%s" as such route does not exist.', $name));
        }

        list($variables, $defaults, $requirements, $tokens, $hostTokens) = self::$declaredRoutes[$name];

        return $this->doGenerate($variables, $defaults, $requirements, $tokens, $parameters, $name, $referenceType, $hostTokens);
    }
}
